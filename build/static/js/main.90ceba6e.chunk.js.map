{"version":3,"sources":["component/counter.jsx","reportWebVitals.js","index.js"],"names":["Counter","state","counter","toDoList","handleIncrement","room","push","setState","init","handleDecrement","console","log","length","pop","this","color","type","onClick","formatCount","shape","size","bordered","dataSource","renderItem","item","Item","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAKMA,E,4MACFC,MAAM,CACFC,QAAQ,EACRC,SAAS,I,EAEbC,gBAAkB,WAGd,IAAIC,EAAO,EAAKJ,MAAMC,QACtB,EAAKD,MAAMC,QAAUG,EAAK,EAC1B,EAAKJ,MAAME,SAASG,KAAK,EAAKL,MAAMC,SAGpC,EAAKK,SAAS,EAAKN,Q,EAEvBO,KAAO,WACH,EAAKP,MAAMC,QAAU,EACrB,EAAKD,MAAME,SAAW,GACtB,EAAKI,SAAS,EAAKN,Q,EAEvBQ,gBAAkB,WAIV,GADAC,QAAQC,IAAI,UACT,EAAKV,MAAME,SAASS,OAAS,EAAE,CAClC,IAAIP,EAAO,EAAKJ,MAAMC,QAAS,EAC/B,EAAKD,MAAMC,QAAUG,EACrBA,EAAO,EAAKJ,MAAME,SAASU,MAE3B,EAAKN,SAAS,EAAKN,S,iDAM3B,WACI,OAA4B,IAArBa,KAAKb,MAAMC,QAAc,cAAC,IAAD,CAAKa,MAAM,SAAX,kBAAgC,cAAC,IAAD,CAAKA,MAAM,QAAX,SAAoBD,KAAKb,MAAMC,Y,oBAEnG,WACI,OAAQ,gCACI,kDACA,yCACA,uBACA,cAAC,IAAD,CAAQc,KAAM,UAAUC,QAASH,KAAKN,KAAtC,0BACA,uBACCM,KAAKI,cACN,cAAC,IAAD,CAAQC,MAAM,QAAQF,QAASH,KAAKV,gBAApC,oBACA,cAAC,IAAD,CAAQe,MAAM,QAAQF,QAASH,KAAKL,gBAApC,oBACA,uBACA,cAAC,IAAD,CACIW,KAAK,QACLC,UAAQ,EACRC,WAAYR,KAAKb,MAAME,SACvBoB,WAAY,SAAAC,GAAI,OAAI,cAAC,IAAKC,KAAN,UAAYD,c,GArDlCE,IAAMC,WA2Db3B,ICpDA4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.90ceba6e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport { Input, Button,Tag,List } from \"antd\";\r\n\r\nclass Counter extends React.Component {\r\n    state={\r\n        counter:0,\r\n        toDoList:[]\r\n    }\r\n    handleIncrement = ()=>{\r\n        // console.log('button');\r\n        // this.state.counter++;\r\n        var room = this.state.counter;\r\n        this.state.counter = room+1;\r\n        this.state.toDoList.push(this.state.counter);\r\n        \r\n        // console.log(this.state.counter)\r\n        this.setState(this.state);\r\n    }\r\n    init = ()=>{\r\n        this.state.counter = 0;\r\n        this.state.toDoList = [];\r\n        this.setState(this.state);\r\n    }\r\n    handleDecrement = ()=>{\r\n        // console.log('button');\r\n        //if(this.state.counter<=0){\r\n            console.log('button');\r\n            if(this.state.toDoList.length > 0){\r\n            var room = this.state.counter -1\r\n            this.state.counter = room;\r\n            room = this.state.toDoList.pop();\r\n            // this.state.toDoList.push(this.state.counter)\r\n            this.setState(this.state)\r\n            }\r\n        //}else{\r\n            //this.setState({counter:this.state.toDoList.length-1,toDoList:this.state.toDoList.slice(0,1)})\r\n        //}\r\n    }\r\n    formatCount(){\r\n        return this.state.counter===0 ? <Tag color=\"yellow\">Zero</Tag> :<Tag color=\"green\">{this.state.counter}</Tag>\r\n    }\r\n    render() { \r\n        return  <div>\r\n                    <h5>made by ikin#453</h5>\r\n                    <h1>Counter</h1>\r\n                    <br/>\r\n                    <Button type =\"primary\" onClick={this.init}> Initialize </Button>\r\n                    <br/>\r\n                    {this.formatCount()}\r\n                    <Button shape=\"round\" onClick={this.handleIncrement}> plus </Button>\r\n                    <Button shape=\"round\" onClick={this.handleDecrement}> minus</Button>\r\n                    <br/>\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n                        dataSource={this.state.toDoList}\r\n                        renderItem={item => <List.Item>{item}</List.Item>}\r\n                    />\r\n                </div>;\r\n    }\r\n}\r\n\r\nexport default Counter;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Counter from './component/counter';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Counter/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
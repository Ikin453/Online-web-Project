"use strict";

<<<<<<< HEAD
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

=======
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

>>>>>>> 0c1d8533fd9ba5f385e7fc867e325dccfff5259b
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

<<<<<<< HEAD
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

=======
var React = _interopRequireWildcard(require("react"));

var _BodyRow = _interopRequireDefault(require("./BodyRow"));

>>>>>>> 0c1d8533fd9ba5f385e7fc867e325dccfff5259b
var _TableContext = _interopRequireDefault(require("../context/TableContext"));

var _ExpandedRow = _interopRequireDefault(require("./ExpandedRow"));

var _BodyContext = _interopRequireDefault(require("../context/BodyContext"));

var _valueUtil = require("../utils/valueUtil");

var _ResizeContext = _interopRequireDefault(require("../context/ResizeContext"));

var _MeasureCell = _interopRequireDefault(require("./MeasureCell"));

<<<<<<< HEAD
var _BodyRow = _interopRequireDefault(require("./BodyRow"));

var _useFlattenRecords = _interopRequireDefault(require("../hooks/useFlattenRecords"));

var _HoverContext = _interopRequireDefault(require("../context/HoverContext"));

=======
>>>>>>> 0c1d8533fd9ba5f385e7fc867e325dccfff5259b
function Body(_ref) {
  var data = _ref.data,
      getRowKey = _ref.getRowKey,
      measureColumnWidth = _ref.measureColumnWidth,
      expandedKeys = _ref.expandedKeys,
      onRow = _ref.onRow,
      rowExpandable = _ref.rowExpandable,
      emptyNode = _ref.emptyNode,
      childrenColumnName = _ref.childrenColumnName;

<<<<<<< HEAD
  var _React$useState = React.useState(-1),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      startRow = _React$useState2[0],
      setStartRow = _React$useState2[1];

  var _React$useState3 = React.useState(-1),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      endRow = _React$useState4[0],
      setEndRow = _React$useState4[1];

=======
>>>>>>> 0c1d8533fd9ba5f385e7fc867e325dccfff5259b
  var _React$useContext = React.useContext(_ResizeContext.default),
      onColumnResize = _React$useContext.onColumnResize;

  var _React$useContext2 = React.useContext(_TableContext.default),
      prefixCls = _React$useContext2.prefixCls,
      getComponent = _React$useContext2.getComponent;

  var _React$useContext3 = React.useContext(_BodyContext.default),
      fixHeader = _React$useContext3.fixHeader,
      horizonScroll = _React$useContext3.horizonScroll,
      flattenColumns = _React$useContext3.flattenColumns,
      componentWidth = _React$useContext3.componentWidth;

<<<<<<< HEAD
  var flattenData = (0, _useFlattenRecords.default)(data, childrenColumnName, expandedKeys, getRowKey);
  var onHover = React.useCallback(function (start, end) {
    setStartRow(start);
    setEndRow(end);
  }, []);
  var hoverContext = React.useMemo(function () {
    return {
      startRow: startRow,
      endRow: endRow,
      onHover: onHover
    };
  }, [onHover, startRow, endRow]);
=======
>>>>>>> 0c1d8533fd9ba5f385e7fc867e325dccfff5259b
  return React.useMemo(function () {
    var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');
    var trComponent = getComponent(['body', 'row'], 'tr');
    var tdComponent = getComponent(['body', 'cell'], 'td');
    var rows;

    if (data.length) {
<<<<<<< HEAD
      rows = flattenData.map(function (item, index) {
        var record = item.record,
            indent = item.indent;
=======
      rows = data.map(function (record, index) {
>>>>>>> 0c1d8533fd9ba5f385e7fc867e325dccfff5259b
        var key = getRowKey(record, index);
        return /*#__PURE__*/React.createElement(_BodyRow.default, {
          key: key,
          rowKey: key,
          record: record,
          recordKey: key,
          index: index,
          rowComponent: trComponent,
          cellComponent: tdComponent,
          expandedKeys: expandedKeys,
          onRow: onRow,
          getRowKey: getRowKey,
          rowExpandable: rowExpandable,
<<<<<<< HEAD
          childrenColumnName: childrenColumnName,
          indent: indent
=======
          childrenColumnName: childrenColumnName
>>>>>>> 0c1d8533fd9ba5f385e7fc867e325dccfff5259b
        });
      });
    } else {
      rows = /*#__PURE__*/React.createElement(_ExpandedRow.default, {
        expanded: true,
        className: "".concat(prefixCls, "-placeholder"),
        prefixCls: prefixCls,
        fixHeader: fixHeader,
        fixColumn: horizonScroll,
        horizonScroll: horizonScroll,
        component: trComponent,
        componentWidth: componentWidth,
        cellComponent: tdComponent,
        colSpan: flattenColumns.length
      }, emptyNode);
    }

    var columnsKey = (0, _valueUtil.getColumnsKey)(flattenColumns);
<<<<<<< HEAD
    return /*#__PURE__*/React.createElement(_HoverContext.default.Provider, {
      value: hoverContext
    }, /*#__PURE__*/React.createElement(WrapperComponent, {
=======
    return /*#__PURE__*/React.createElement(WrapperComponent, {
>>>>>>> 0c1d8533fd9ba5f385e7fc867e325dccfff5259b
      className: "".concat(prefixCls, "-tbody")
    }, measureColumnWidth && /*#__PURE__*/React.createElement("tr", {
      "aria-hidden": "true",
      className: "".concat(prefixCls, "-measure-row"),
      style: {
        height: 0,
        fontSize: 0
      }
    }, columnsKey.map(function (columnKey) {
      return /*#__PURE__*/React.createElement(_MeasureCell.default, {
        key: columnKey,
        columnKey: columnKey,
        onColumnResize: onColumnResize
      });
<<<<<<< HEAD
    })), rows));
  }, [data, prefixCls, onRow, measureColumnWidth, expandedKeys, getRowKey, getComponent, componentWidth, emptyNode, flattenColumns, childrenColumnName, fixHeader, horizonScroll, onColumnResize, rowExpandable, flattenData, hoverContext]);
=======
    })), rows);
  }, [data, prefixCls, onRow, measureColumnWidth, expandedKeys, getRowKey, getComponent, componentWidth, emptyNode, flattenColumns]);
>>>>>>> 0c1d8533fd9ba5f385e7fc867e325dccfff5259b
}

var MemoBody = /*#__PURE__*/React.memo(Body);
MemoBody.displayName = 'Body';
var _default = MemoBody;
exports.default = _default;
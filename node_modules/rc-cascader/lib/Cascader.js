"use strict";

<<<<<<< HEAD
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

=======
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

>>>>>>> 0c1d8533fd9ba5f385e7fc867e325dccfff5259b
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

<<<<<<< HEAD
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _warning = _interopRequireDefault(require("rc-util/lib/warning"));

var _useMergedState3 = _interopRequireDefault(require("rc-util/lib/hooks/useMergedState"));

var _generate = _interopRequireDefault(require("rc-tree-select/lib/generate"));

var _OptionList = _interopRequireDefault(require("./OptionList"));

var _context = _interopRequireDefault(require("./context"));

var _util = require("./util");

var _useUpdateEffect = _interopRequireDefault(require("./hooks/useUpdateEffect"));

var _useSearchConfig3 = _interopRequireDefault(require("./hooks/useSearchConfig"));

var _excluded = ["checkable", "changeOnSelect", "children", "options", "onChange", "value", "defaultValue", "popupVisible", "open", "dropdownClassName", "popupClassName", "onDropdownVisibleChange", "onPopupVisibleChange", "popupPlacement", "placement", "searchValue", "onSearch", "showSearch", "expandTrigger", "expandIcon", "loadingIcon", "displayRender", "loadData", "dropdownMenuColumnStyle", "dropdownPrefixCls"];
var INTERNAL_VALUE_FIELD = '__rc_cascader_value__';
/**
 * `rc-cascader` is much like `rc-tree-select` but API is very different.
 * It's caused that component developer is not same person
 * and we do not rice the API naming standard at that time.
 *
 * To avoid breaking change, wrap the `rc-tree-select` to compatible with `rc-cascader` API.
 * This should be better to merge to same API like `rc-tree-select` or `rc-select` in next major version.
 *
 * Update:
 * - dropdown class change to `rc-cascader-dropdown`
 * - direction rtl keyboard
 *
 * Deprecated:
 * - popupVisible
 * - hidePopupOnSelect
 *
 * Removed:
 * - builtinPlacements: Handle by select
 */

var RefCascader = (0, _generate.default)({
  prefixCls: 'rc-cascader',
  optionList: _OptionList.default
});

function defaultDisplayRender(labels) {
  return labels.join(' / ');
}

var Cascader = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var checkable = props.checkable,
      changeOnSelect = props.changeOnSelect,
      children = props.children,
      options = props.options,
      onChange = props.onChange,
      value = props.value,
      defaultValue = props.defaultValue,
      popupVisible = props.popupVisible,
      open = props.open,
      dropdownClassName = props.dropdownClassName,
      popupClassName = props.popupClassName,
      onDropdownVisibleChange = props.onDropdownVisibleChange,
      onPopupVisibleChange = props.onPopupVisibleChange,
      popupPlacement = props.popupPlacement,
      placement = props.placement,
      searchValue = props.searchValue,
      onSearch = props.onSearch,
      showSearch = props.showSearch,
      expandTrigger = props.expandTrigger,
      _props$expandIcon = props.expandIcon,
      expandIcon = _props$expandIcon === void 0 ? '>' : _props$expandIcon,
      loadingIcon = props.loadingIcon,
      _props$displayRender = props.displayRender,
      displayRender = _props$displayRender === void 0 ? defaultDisplayRender : _props$displayRender,
      loadData = props.loadData,
      dropdownMenuColumnStyle = props.dropdownMenuColumnStyle,
      dropdownPrefixCls = props.dropdownPrefixCls,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var fieldNames = restProps.fieldNames; // ============================ Ref =============================

  var cascaderRef = React.useRef();
  React.useImperativeHandle(ref, function () {
    return {
      focus: function focus() {
        cascaderRef.current.focus();
      },
      blur: function blur() {
        cascaderRef.current.blur();
      }
    };
  });

  var getEntityByValue = function getEntityByValue(val) {
    return cascaderRef.current.getEntityByValue(val);
  }; // =========================== Search ===========================


  var _useMergedState = (0, _useMergedState3.default)(undefined, {
    value: searchValue,
    onChange: onSearch
  }),
      _useMergedState2 = (0, _slicedToArray2.default)(_useMergedState, 2),
      mergedSearch = _useMergedState2[0],
      setMergedSearch = _useMergedState2[1];

  var _useSearchConfig = (0, _useSearchConfig3.default)(showSearch),
      _useSearchConfig2 = (0, _slicedToArray2.default)(_useSearchConfig, 2),
      mergedShowSearch = _useSearchConfig2[0],
      searchConfig = _useSearchConfig2[1]; // ========================== Options ===========================


  var outerFieldNames = React.useMemo(function () {
    return (0, _util.fillFieldNames)(fieldNames);
  }, [fieldNames]);
  var mergedFieldNames = React.useMemo(function () {
    return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, outerFieldNames), {}, {
      value: INTERNAL_VALUE_FIELD
    });
  }, [outerFieldNames]);
  var mergedOptions = React.useMemo(function () {
    return (0, _util.convertOptions)(options, outerFieldNames, INTERNAL_VALUE_FIELD);
  }, [options, outerFieldNames]); // =========================== Value ============================

  /**
   * Always pass props value to last value unit:
   * - single: ['light', 'little'] => ['light__little']
   * - multiple: [['light', 'little'], ['bamboo']] => ['light__little', 'bamboo']
   */

  var parseToInternalValue = function parseToInternalValue(propValue) {
    var propValueList = [];

    if (propValue) {
      propValueList = checkable ? propValue : [propValue];
    }

    return propValueList.map(_util.connectValue);
  };

  var _React$useState = React.useState(function () {
    return parseToInternalValue(value || defaultValue);
  }),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      internalValue = _React$useState2[0],
      setInternalValue = _React$useState2[1];

  (0, _useUpdateEffect.default)(function () {
    setInternalValue(parseToInternalValue(value));
  }, [value]); // =========================== Label ============================

  var labelRender = function labelRender(entity, val) {
    var fieldLabel = mergedFieldNames.label;

    if (!entity) {
      var valPath = (0, _util.splitValue)(val);
      return displayRender(valPath, []);
    }

    if (checkable) {
      return entity.data.node[fieldLabel];
    }

    var _restoreCompatibleVal = (0, _util.restoreCompatibleValue)(entity, mergedFieldNames),
        selectedOptions = _restoreCompatibleVal.options;

    var rawOptions = selectedOptions.map(function (opt) {
      return opt.node;
    });
    var labelList = rawOptions.map(function (opt) {
      return opt[fieldLabel];
    });
    return displayRender(labelList, rawOptions);
  }; // =========================== Change ===========================


  var onInternalChange = function onInternalChange(newValue
  /** Not care current type */
  ) {
    // TODO: Need improve motion experience
    setMergedSearch('');
    var valueList = checkable ? newValue : [newValue];
    var pathList = [];
    var optionsList = [];
    var valueEntities = valueList.map(getEntityByValue).filter(function (entity) {
      return entity;
    });
    valueEntities.forEach(function (entity) {
      var _restoreCompatibleVal2 = (0, _util.restoreCompatibleValue)(entity, mergedFieldNames),
          valueOptions = _restoreCompatibleVal2.options;

      var originOptions = valueOptions.map(function (option) {
        return option.node;
      });
      pathList.push(originOptions.map(function (opt) {
        return (// Here we should use original FieldNames value mapping
          opt[outerFieldNames.value]
        );
      }));
      optionsList.push(originOptions);
    }); // Fill state

    if (value === undefined) {
      setInternalValue(valueList);
    }

    if (onChange) {
      if (checkable) {
        onChange(pathList, optionsList);
      } else {
        // TODO: This should return null as other component.
        // But its a breaking change and we should keep the logic.
        onChange(pathList[0] || [], optionsList[0] || []);
      }
    }
  }; // ============================ Open ============================


  if (process.env.NODE_ENV !== 'production') {
    (0, _warning.default)(!onPopupVisibleChange, '`onPopupVisibleChange` is deprecated. Please use `onDropdownVisibleChange` instead.');
    (0, _warning.default)(popupVisible === undefined, '`popupVisible` is deprecated. Please use `open` instead.');
    (0, _warning.default)(popupClassName === undefined, '`popupClassName` is deprecated. Please use `dropdownClassName` instead.');
    (0, _warning.default)(popupPlacement === undefined, '`popupPlacement` is deprecated. Please use `placement` instead.');
  }

  var mergedOpen = open !== undefined ? open : popupVisible;
  var mergedDropdownClassName = dropdownClassName || popupClassName;
  var mergedPlacement = placement || popupPlacement;

  var onInternalDropdownVisibleChange = function onInternalDropdownVisibleChange(nextVisible) {
    onDropdownVisibleChange === null || onDropdownVisibleChange === void 0 ? void 0 : onDropdownVisibleChange(nextVisible);
    onPopupVisibleChange === null || onPopupVisibleChange === void 0 ? void 0 : onPopupVisibleChange(nextVisible);
  }; // ========================== Context ===========================


  var context = React.useMemo(function () {
    return {
      changeOnSelect: changeOnSelect,
      expandTrigger: expandTrigger,
      fieldNames: mergedFieldNames,
      expandIcon: expandIcon,
      loadingIcon: loadingIcon,
      loadData: loadData,
      dropdownMenuColumnStyle: dropdownMenuColumnStyle,
      search: searchConfig,
      dropdownPrefixCls: dropdownPrefixCls
    };
  }, [changeOnSelect, expandTrigger, mergedFieldNames, expandIcon, loadingIcon, loadData, dropdownMenuColumnStyle, searchConfig, dropdownPrefixCls]); // =========================== Render ===========================

  var dropdownStyle = // Search to match width
  mergedSearch && searchConfig.matchInputWidth || // Empty keep the width
  !mergedOptions.length ? {} : {
    minWidth: 'auto'
  };
  return /*#__PURE__*/React.createElement(_context.default.Provider, {
    value: context
  }, /*#__PURE__*/React.createElement(RefCascader, (0, _extends2.default)({
    ref: cascaderRef
  }, restProps, {
    fieldNames: mergedFieldNames,
    value: checkable ? internalValue : internalValue[0],
    placement: mergedPlacement,
    dropdownMatchSelectWidth: false,
    dropdownStyle: dropdownStyle,
    dropdownClassName: mergedDropdownClassName,
    treeData: mergedOptions,
    treeCheckable: checkable,
    treeNodeFilterProp: "label",
    onChange: onInternalChange,
    showCheckedStrategy: RefCascader.SHOW_PARENT,
    open: mergedOpen,
    onDropdownVisibleChange: onInternalDropdownVisibleChange,
    searchValue: mergedSearch // Customize filter logic in OptionList
    ,
    filterTreeNode: function filterTreeNode() {
      return true;
    },
    showSearch: mergedShowSearch,
    onSearch: setMergedSearch,
    labelRender: labelRender,
    getRawInputElement: function getRawInputElement() {
      return children;
    }
  })));
});
Cascader.displayName = 'Cascader';
=======
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var React = _interopRequireWildcard(require("react"));

var _rcTrigger = _interopRequireDefault(require("rc-trigger"));

var _warning = _interopRequireDefault(require("warning"));

var _KeyCode = _interopRequireDefault(require("rc-util/lib/KeyCode"));

var _arrayTreeFilter = _interopRequireDefault(require("array-tree-filter"));

var _utils = require("./utils");

var _Menus = _interopRequireDefault(require("./Menus"));

var _placements = _interopRequireDefault(require("./placements"));

var Cascader = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(Cascader, _React$Component);

  var _super = (0, _createSuper2.default)(Cascader);

  function Cascader(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Cascader);
    _this = _super.call(this, props);

    _this.setPopupVisible = function (popupVisible) {
      var value = _this.state.value;

      if (!('popupVisible' in _this.props)) {
        _this.setState({
          popupVisible: popupVisible
        });
      } // sync activeValue with value when panel open


      if (popupVisible && !_this.state.popupVisible) {
        _this.setState({
          activeValue: value
        });
      }

      _this.props.onPopupVisibleChange(popupVisible);
    };

    _this.handleChange = function (options, _ref, e) {
      var visible = _ref.visible;

      if (e.type !== 'keydown' || e.keyCode === _KeyCode.default.ENTER) {
        _this.props.onChange(options.map(function (o) {
          return o[_this.getFieldName('value')];
        }), options);

        _this.setPopupVisible(visible);
      }
    };

    _this.handlePopupVisibleChange = function (popupVisible) {
      _this.setPopupVisible(popupVisible);
    };

    _this.handleMenuSelect = function (targetOption, menuIndex, e) {
      // Keep focused state for keyboard support
      var triggerNode = _this.trigger.getRootDomNode();

      if (triggerNode && triggerNode.focus) {
        triggerNode.focus();
      }

      var _this$props = _this.props,
          changeOnSelect = _this$props.changeOnSelect,
          loadData = _this$props.loadData,
          expandTrigger = _this$props.expandTrigger;

      if (!targetOption || targetOption.disabled) {
        return;
      }

      var activeValue = _this.state.activeValue;
      activeValue = activeValue.slice(0, menuIndex + 1);
      activeValue[menuIndex] = targetOption[_this.getFieldName('value')];

      var activeOptions = _this.getActiveOptions(activeValue);

      if (targetOption.isLeaf === false && !targetOption[_this.getFieldName('children')] && loadData) {
        if (changeOnSelect) {
          _this.handleChange(activeOptions, {
            visible: true
          }, e);
        }

        _this.setState({
          activeValue: activeValue
        });

        loadData(activeOptions);
        return;
      }

      var newState = {};

      if (!targetOption[_this.getFieldName('children')] || !targetOption[_this.getFieldName('children')].length) {
        _this.handleChange(activeOptions, {
          visible: false
        }, e); // set value to activeValue when select leaf option


        newState.value = activeValue; // add e.type judgement to prevent `onChange` being triggered by mouseEnter
      } else if (changeOnSelect && (e.type === 'click' || e.type === 'keydown')) {
        if (expandTrigger === 'hover') {
          _this.handleChange(activeOptions, {
            visible: false
          }, e);
        } else {
          _this.handleChange(activeOptions, {
            visible: true
          }, e);
        } // set value to activeValue on every select


        newState.value = activeValue;
      }

      newState.activeValue = activeValue; //  not change the value by keyboard

      if ('value' in _this.props || e.type === 'keydown' && e.keyCode !== _KeyCode.default.ENTER) {
        delete newState.value;
      }

      _this.setState(newState);
    };

    _this.handleItemDoubleClick = function () {
      var changeOnSelect = _this.props.changeOnSelect;

      if (changeOnSelect) {
        _this.setPopupVisible(false);
      }
    };

    _this.handleKeyDown = function (e) {
      var children = _this.props.children; // https://github.com/ant-design/ant-design/issues/6717
      // Don't bind keyboard support when children specify the onKeyDown

      if (children && children.props.onKeyDown) {
        children.props.onKeyDown(e);
        return;
      }

      var activeValue = (0, _toConsumableArray2.default)(_this.state.activeValue);
      var currentLevel = activeValue.length - 1 < 0 ? 0 : activeValue.length - 1;

      var currentOptions = _this.getCurrentLevelOptions();

      var currentIndex = currentOptions.map(function (o) {
        return o[_this.getFieldName('value')];
      }).indexOf(activeValue[currentLevel]);

      if (e.keyCode !== _KeyCode.default.DOWN && e.keyCode !== _KeyCode.default.UP && e.keyCode !== _KeyCode.default.LEFT && e.keyCode !== _KeyCode.default.RIGHT && e.keyCode !== _KeyCode.default.ENTER && e.keyCode !== _KeyCode.default.SPACE && e.keyCode !== _KeyCode.default.BACKSPACE && e.keyCode !== _KeyCode.default.ESC && e.keyCode !== _KeyCode.default.TAB) {
        return;
      } // Press any keys above to reopen menu


      if (!_this.state.popupVisible && e.keyCode !== _KeyCode.default.BACKSPACE && e.keyCode !== _KeyCode.default.LEFT && e.keyCode !== _KeyCode.default.RIGHT && e.keyCode !== _KeyCode.default.ESC && e.keyCode !== _KeyCode.default.TAB) {
        _this.setPopupVisible(true);

        if (_this.props.onKeyDown) {
          _this.props.onKeyDown(e);
        }

        return;
      }

      if (e.keyCode === _KeyCode.default.DOWN || e.keyCode === _KeyCode.default.UP) {
        e.preventDefault();
        var nextIndex = currentIndex;

        if (nextIndex !== -1) {
          if (e.keyCode === _KeyCode.default.DOWN) {
            nextIndex += 1;
            nextIndex = nextIndex >= currentOptions.length ? 0 : nextIndex;
          } else {
            nextIndex -= 1;
            nextIndex = nextIndex < 0 ? currentOptions.length - 1 : nextIndex;
          }
        } else {
          nextIndex = 0;
        }

        activeValue[currentLevel] = currentOptions[nextIndex][_this.getFieldName('value')];
      } else if (e.keyCode === _KeyCode.default.LEFT || e.keyCode === _KeyCode.default.BACKSPACE) {
        e.preventDefault();
        activeValue.splice(activeValue.length - 1, 1);
      } else if (e.keyCode === _KeyCode.default.RIGHT) {
        e.preventDefault();

        if (currentOptions[currentIndex] && currentOptions[currentIndex][_this.getFieldName('children')]) {
          activeValue.push(currentOptions[currentIndex][_this.getFieldName('children')][0][_this.getFieldName('value')]);
        }
      } else if (e.keyCode === _KeyCode.default.ESC || e.keyCode === _KeyCode.default.TAB) {
        _this.setPopupVisible(false);

        if (_this.props.onKeyDown) {
          _this.props.onKeyDown(e);
        }

        return;
      }

      if (!activeValue || activeValue.length === 0) {
        _this.setPopupVisible(false);
      }

      var activeOptions = _this.getActiveOptions(activeValue);

      var targetOption = activeOptions[activeOptions.length - 1];

      _this.handleMenuSelect(targetOption, activeOptions.length - 1, e);

      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(e);
      }
    };

    _this.saveTrigger = function (node) {
      _this.trigger = node;
    };

    var initialValue = [];

    if ('value' in props) {
      initialValue = props.value || [];
    } else if ('defaultValue' in props) {
      initialValue = props.defaultValue || [];
    }

    (0, _warning.default)(!('filedNames' in props), '`filedNames` of Cascader is a typo usage and deprecated, please use `fieldNames` instead.');
    _this.state = {
      popupVisible: props.popupVisible,
      activeValue: initialValue,
      value: initialValue,
      prevProps: props
    };
    _this.defaultFieldNames = {
      label: 'label',
      value: 'value',
      children: 'children'
    };
    return _this;
  }

  (0, _createClass2.default)(Cascader, [{
    key: "getPopupDOMNode",
    value: function getPopupDOMNode() {
      return this.trigger.getPopupDomNode();
    }
  }, {
    key: "getFieldName",
    value: function getFieldName(name) {
      var defaultFieldNames = this.defaultFieldNames;
      var _this$props2 = this.props,
          fieldNames = _this$props2.fieldNames,
          filedNames = _this$props2.filedNames;

      if ('filedNames' in this.props) {
        return filedNames[name] || defaultFieldNames[name]; // For old compatibility
      }

      return fieldNames[name] || defaultFieldNames[name];
    }
  }, {
    key: "getFieldNames",
    value: function getFieldNames() {
      var _this$props3 = this.props,
          fieldNames = _this$props3.fieldNames,
          filedNames = _this$props3.filedNames;

      if ('filedNames' in this.props) {
        return filedNames; // For old compatibility
      }

      return fieldNames;
    }
  }, {
    key: "getCurrentLevelOptions",
    value: function getCurrentLevelOptions() {
      var _this2 = this;

      var _this$props$options = this.props.options,
          options = _this$props$options === void 0 ? [] : _this$props$options;
      var _this$state$activeVal = this.state.activeValue,
          activeValue = _this$state$activeVal === void 0 ? [] : _this$state$activeVal;
      var result = (0, _arrayTreeFilter.default)(options, function (o, level) {
        return o[_this2.getFieldName('value')] === activeValue[level];
      }, {
        childrenKeyName: this.getFieldName('children')
      });

      if (result[result.length - 2]) {
        return result[result.length - 2][this.getFieldName('children')];
      }

      return (0, _toConsumableArray2.default)(options).filter(function (o) {
        return !o.disabled;
      });
    }
  }, {
    key: "getActiveOptions",
    value: function getActiveOptions(activeValue) {
      var _this3 = this;

      return (0, _arrayTreeFilter.default)(this.props.options || [], function (o, level) {
        return o[_this3.getFieldName('value')] === activeValue[level];
      }, {
        childrenKeyName: this.getFieldName('children')
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          prefixCls = _this$props4.prefixCls,
          transitionName = _this$props4.transitionName,
          popupClassName = _this$props4.popupClassName,
          _this$props4$options = _this$props4.options,
          options = _this$props4$options === void 0 ? [] : _this$props4$options,
          disabled = _this$props4.disabled,
          builtinPlacements = _this$props4.builtinPlacements,
          popupPlacement = _this$props4.popupPlacement,
          children = _this$props4.children,
          dropdownRender = _this$props4.dropdownRender,
          restProps = (0, _objectWithoutProperties2.default)(_this$props4, ["prefixCls", "transitionName", "popupClassName", "options", "disabled", "builtinPlacements", "popupPlacement", "children", "dropdownRender"]); // Did not show popup when there is no options

      var menus = /*#__PURE__*/React.createElement("div", null);
      var emptyMenuClassName = '';

      if (options && options.length > 0) {
        menus = /*#__PURE__*/React.createElement(_Menus.default, (0, _extends2.default)({}, this.props, {
          fieldNames: this.getFieldNames(),
          defaultFieldNames: this.defaultFieldNames,
          activeValue: this.state.activeValue,
          onSelect: this.handleMenuSelect,
          onItemDoubleClick: this.handleItemDoubleClick,
          visible: this.state.popupVisible
        }));
      } else {
        emptyMenuClassName = " ".concat(prefixCls, "-menus-empty");
      }

      var popupNode = menus;

      if (dropdownRender) {
        popupNode = dropdownRender(menus);
      }

      return /*#__PURE__*/React.createElement(_rcTrigger.default, (0, _extends2.default)({
        ref: this.saveTrigger
      }, restProps, {
        popupPlacement: popupPlacement,
        builtinPlacements: builtinPlacements,
        popupTransitionName: transitionName,
        action: disabled ? [] : ['click'],
        popupVisible: disabled ? false : this.state.popupVisible,
        onPopupVisibleChange: this.handlePopupVisibleChange,
        prefixCls: "".concat(prefixCls, "-menus"),
        popupClassName: popupClassName + emptyMenuClassName,
        popup: popupNode
      }), /*#__PURE__*/React.cloneElement(children, {
        onKeyDown: this.handleKeyDown,
        tabIndex: disabled ? undefined : 0
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var _prevState$prevProps = prevState.prevProps,
          prevProps = _prevState$prevProps === void 0 ? {} : _prevState$prevProps;
      var newState = {
        prevProps: nextProps
      };

      if ('value' in nextProps && !(0, _utils.isEqualArrays)(prevProps.value, nextProps.value)) {
        newState.value = nextProps.value || []; // allow activeValue diff from value
        // https://github.com/ant-design/ant-design/issues/2767

        if (!('loadData' in nextProps)) {
          newState.activeValue = nextProps.value || [];
        }
      }

      if ('popupVisible' in nextProps) {
        newState.popupVisible = nextProps.popupVisible;
      }

      return newState;
    }
  }]);
  return Cascader;
}(React.Component);

Cascader.defaultProps = {
  onChange: function onChange() {},
  onPopupVisibleChange: function onPopupVisibleChange() {},
  disabled: false,
  transitionName: '',
  prefixCls: 'rc-cascader',
  popupClassName: '',
  popupPlacement: 'bottomLeft',
  builtinPlacements: _placements.default,
  expandTrigger: 'click',
  fieldNames: {
    label: 'label',
    value: 'value',
    children: 'children'
  },
  expandIcon: '>'
};
>>>>>>> 0c1d8533fd9ba5f385e7fc867e325dccfff5259b
var _default = Cascader;
exports.default = _default;